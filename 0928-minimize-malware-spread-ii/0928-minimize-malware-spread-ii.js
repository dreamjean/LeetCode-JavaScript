/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function(graph, initial) {
  const n = graph.length;
  const uf = new UnionFind(n);
  const set = new Set(initial);
  const clean = [...new Array(n).keys()].filter((x) => !set.has(x));
  const malCount = new Array(n).fill(0);
  const infectNode = {};
  let [ans, max] = [-1, -1];
    
  for (let u of clean) {
    for (let v of clean) {
      if (graph[u][v]) uf.union(u, v);
    }
  }
  
  for (let u of initial) {
    const nodes = new Set();
    for (let v of clean) {
      if (graph[u][v]) nodes.add(uf.find(v));
    }
    infectNode[u] = nodes;
    for (let node of nodes) malCount[node]++;
  }

  for (let u of initial) {
    let count = 0;
    for (let node of infectNode[u]) {
      if (malCount[node] === 1) count += uf.getSize(node);
    }
    
    if (count > max || (count === max && u < ans)) [max, ans] = [count, u];
  }
  
  return ans;
};

class UnionFind {
  constructor(n) {
    this.parent = Array.from({ length: n }, (_, i) => i);
    this.size = new Array(n).fill(1);
  }
  
  find(x) {
    const parent = this.parent;
    while (x !== parent[x]) {
      parent[x] = parent[parent[x]];
      x = parent[x];
    }
    
    return parent[x];
  }
  
  union(x, y) {
    let rootX = this.find(x);
    let rootY = this.find(y);
    if (rootX === rootY) return;
    
    const { parent, size } = this;
    if (size[rootX] < size[rootY]) {
      parent[rootX] = rootY;
      size[rootY] += size[rootX];
    } else {
      parent[rootY] = rootX;
      size[rootX] += size[rootY];
    }
  }
  
  getSize(x) {
    const root = this.find(x);
    return this.size[root];
  }
}