class UnionFind:
    def __init__(self, n: int):
        self.parent = [i for i in range(n)]
        
    def find(self, x):
        if x != self.parent[x]:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
      
    def union(self, x, y):
        rootX, rootY = self.find(x), self.find(y)
        if rootX != rootY:
            self.parent[rootX] = rootY 

            
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        uf = UnionFind(n)
        area = [0] * n
        malCount = [0] * n
        save, ans = 0, min(initial)
        
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j]:
                    uf.union(i, j)
                    
        for i in range(n):
            area[uf.find(i)] += 1
        
        for x in initial:
            malCount[uf.find(x)] += 1
            
        for x in initial:
            if malCount[uf.find(x)] == 1:
                areaNum = area[uf.find(x)]
                if areaNum > save:
                    save = areaNum
                    ans = x
                elif areaNum == save:
                    ans = min(ans, x)
        return ans